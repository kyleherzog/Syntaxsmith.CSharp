using Syntaxsmith.CSharp.Configuration;

namespace Syntaxsmith.CSharp.UnitTests.ClassFileBuilderTests;

[TestClass]
public class BuildShould : VerifyBase
{
    [TestInitialize]
    public void Setup()
    {
        GlobalConfiguration.Reset();
    }

    [TestMethod]
    public void ReturnContentGivenAutoGeneratedOffGloballyOnLocally()
    {
        GlobalConfiguration.CSharpFile = o => o.WithAutoGeneratedComment(false);
        var builder = new ClassFileBuilder("Test", o => o.WithAutoGeneratedComment(true));
        var result = builder.Build();
        Assert.AreEqual("// <autogenerated/>", result);
    }

    [TestMethod]
    public void ReturnContentGivenNoMethodCalls()
    {
        var builder = new ClassFileBuilder("Test");
        var result = builder.Build();
        Assert.AreEqual("// <autogenerated/>", result);
    }

    [TestMethod]
    public void ReturnEmptyGivenTurnAutoGeneratedOff()
    {
        var builder = new ClassFileBuilder("Test", o => o.WithAutoGeneratedComment(false));
        var result = builder.Build();
        Assert.AreEqual(string.Empty, result);
    }

    [TestMethod]
    public void ReturnEmptyGivenTurnAutoGeneratedOffGlobally()
    {
        GlobalConfiguration.CSharpFile = o => o.WithAutoGeneratedComment(false);
        var builder = new ClassFileBuilder("Test");
        var result = builder.Build();
        Assert.AreEqual(string.Empty, result);
    }

    [TestMethod]
    public Task ReturnContentGivenDirective()
    {
        var builder = new ClassFileBuilder("Test", o => o.WithDirective(PreprocessorDirective.NullableEnable));
        var result = builder.Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenMultipleDirectives()
    {
        var builder = new ClassFileBuilder("Test", o => o.WithDirective(PreprocessorDirective.NullableEnable).WithDirective(PreprocessorDirective.Define, "VERBOSE"));
        var result = builder.Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnConentGivenGobalDirective()
    {
        GlobalConfiguration.CSharpFile = o => o.WithDirective(PreprocessorDirective.NullableEnable);
        var builder = new ClassFileBuilder("Test");
        var result = builder.Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenClearDirectives()
    {
        GlobalConfiguration.CSharpFile = o => o.WithDirective(PreprocessorDirective.NullableEnable);
        var builder = new ClassFileBuilder("Test", o => o.ClearDirectives().WithDirective(PreprocessorDirective.NullableDisable));
        var result = builder.Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenGlobalAndLocalDirectives()
    {
        GlobalConfiguration.CSharpFile = o => o.WithDirective(PreprocessorDirective.Define, "VERBOSE");
        var builder = new ClassFileBuilder("Test", o => o.WithDirective(PreprocessorDirective.NullableDisable));
        var result = builder.Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenOpen()
    {
        var builder = new ClassFileBuilder("Test");
        var result = builder.Open()
            .Close()
            .Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenUsings()
    {
        var builder = new ClassFileBuilder("Test");
        var result = builder.AddUsings("System", "System.Linq")
            .Open()
            .Close()
            .Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenUsingsAndNamespace()
    {
        var builder = new ClassFileBuilder("Test");
        var result = builder.AddUsings("System", "System.Linq")
            .AddNamespace("Syntaxsmith.CSharp")
            .Open()
            .Close()
            .Build();
        return Verify(result);
    }

    [TestMethod]
    public Task ReturnContentGivenNamespaceAndDocComments()
    {
        var builder = new ClassFileBuilder("Test");
        var result = builder.AddUsings("System", "System.Linq")
            .AddNamespace("Syntaxsmith.CSharp")
            .AddXmlDocs(o => o.Summary("This is a test."))
            .Open()
            .Close()
            .Build();
        return Verify(result);
    }
}