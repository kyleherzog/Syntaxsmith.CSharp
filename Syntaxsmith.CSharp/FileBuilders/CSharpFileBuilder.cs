using Syntaxsmith.CSharp.Configuration;

namespace Syntaxsmith.CSharp;

public abstract class CSharpFileBuilder<T> : CSharpCodeBuilder<T> where T : CSharpFileBuilder<T>
{
    protected CSharpFileBuilder(string typeName, Action<CSharpFileConfigurationBuilder>? configAction = null, SyntaxContext? context = null)
        : base(context)
    {
        TypeName = typeName
            ?? throw new ArgumentNullException(nameof(typeName));

        var configBuilder = new CSharpFileConfigurationBuilder();
        configAction?.Invoke(configBuilder);
        var config = configBuilder.Build();

        if (config.IsAddingAutoGeneratedComment)
        {
            AddCommentLine("<autogenerated/>");
        }

        foreach (var (Directive, Text) in config.Directives)
        {
            AddDirective(Directive, Text);
        }
    }

    public string TypeName { get; }

    public T AddUsings(params string[] namespaces)
    {
        foreach (var value in namespaces)
        {
            AddLine($"using {value};");
        }

        AddLine();
        return (T)this;
    }

    public T AddNamespace(string value)
    {
        AddLine($"namespace {value};");
        AddLine();
        return (T)this;
    }

    public T Close()
    {
        return BlockClose();
    }
}